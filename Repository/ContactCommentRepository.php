<?php

/*
 * This file is part of the ContactManagement Plugin
 *
 * Copyright (C) 2020 Diezon.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Plugin\ContactManagement\Repository;

use Doctrine\ORM\NonUniqueResultException;
use Plugin\ContactManagement\Entity\ContactComment;
use Eccube\Repository\AbstractRepository;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * ContactCommentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContactCommentRepository extends AbstractRepository
{
    /**
     * constructor.
     *
     * @param RegistryInterface $registry
     */
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, ContactComment::class);
    }

    /**
     * Get latest comments from store.
     *
     * @param $Contact Contact
     * @return ContactComment
     */
    public function getLatestCommentsFromStore($Contact)
    {
        $qb = $this->createQueryBuilder('cc')
            ->where('cc.Member IS NOT NULL')
            ->andwhere('cc.memo = false')
            ->andwhere('cc.Contact = :Contact')
            ->setParameter('Contact', $Contact)
            ->orderBy('cc.update_date', 'DESC')
            ->setMaxResults(1);

        return  $qb->getQuery()->getOneOrNullResult();
    }

    public function getLatestCommentsFromCustomer($Contact)
    {
        $qb = $this->createQueryBuilder('cc')
            ->where('cc.Member IS NULL')
            ->andwhere('cc.Contact = :Contact')
            ->setParameter('Contact', $Contact)
            ->orderBy('cc.update_date', 'DESC')
            ->setMaxResults(1);

        return  $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * Is first reply.
     *
     * @param $Contact Contact
     * @return bool
     * @throws NonUniqueResultException
     */
    public function isFirstReply($Contact)
    {
        $isFirstReply = false;
        $CustomerComment = $this->createQueryBuilder('cc')
            ->where('cc.Member IS NULL')
            ->andwhere('cc.Contact = :Contact')
            ->setParameter('Contact', $Contact)
            ->select('count(cc.id)')
            ->getQuery()
            ->getSingleScalarResult();

        if ($CustomerComment) {
            $storeComment = $this->createQueryBuilder('cc')
                ->where('cc.Member IS NOT NULL')
                ->andwhere('cc.Contact = :Contact')
                ->setParameter('Contact', $Contact)
                ->select('count(cc.id)')
                ->getQuery()
                ->getSingleScalarResult();
            if ($storeComment == 0) {
                $isFirstReply = true;
            }
        }

        return  $isFirstReply;
    }

    /**
     * Have existing subject.
     *
     * @param $Contact Contact
     * @return bool
     * @throws NonUniqueResultException
     */
    public function haveExistingSubject($Contact)
    {
        return $this->getNumberOfRepliesToContacts($Contact) > 0;
    }

    /**
     * Is second reply.
     *
     * @param $Contact Contact
     * @return bool
     * @throws NonUniqueResultException
     */
    public function isSecondReply($Contact)
    {
        return $this->getNumberOfRepliesToContacts($Contact) == 1;
    }

    /**
     * Get number of replies to contacts
     *
     * @param $Contact Contact
     * @return int
     * @throws NonUniqueResultException
     */
    public function getNumberOfRepliesToContacts($Contact)
    {
        return $this->createQueryBuilder('cc')
            ->where('cc.Member IS NOT NULL')
            ->andwhere('cc.send = true')
            ->andwhere('cc.Contact = :Contact')
            ->setParameter('Contact', $Contact)
            ->select('count(cc.id)')
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * @param ContactComment $ContactComment 削除対象のコメント
     */
    public function delete($ContactComment)
    {
        $em = $this->getEntityManager();

        $em->remove($ContactComment);
        $em->flush();
    }
}
