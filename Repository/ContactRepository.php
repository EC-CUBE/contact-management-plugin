<?php

/*
 * This file is part of the ContactManagement Plugin
 *
 * Copyright (C) 2020 Diezon.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Plugin\ContactManagement\Repository;

use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\QueryBuilder;
use Plugin\ContactManagement\Entity\Contact;
use Eccube\Repository\AbstractRepository;
use Symfony\Bridge\Doctrine\RegistryInterface;
use Eccube\Util\StringUtil;
use Plugin\ContactManagement\Form\Type\Admin\SearchContactType;

/**
 * ContactRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContactRepository extends AbstractRepository
{

    /**
     * constructor.
     *
     * @param RegistryInterface $registry
     */
    public function __construct(
        RegistryInterface $registry
    ) {
        parent::__construct($registry, Contact::class);
    }

    /**
     * @param  array $searchData
     *
     * @return QueryBuilder
     */
    public function getQueryBuilderBySearchDataForAdmin($searchData)
    {
        $qb = $this->createQueryBuilder('c')
            ->leftJoin('c.ContactComments', 'cc');

        // multi
        if (isset($searchData['multi_search']) && StringUtil::isNotBlank($searchData['multi_search'])) {
            $multi = preg_match('/^\d{0,10}$/', $searchData['multi_search']) ? $searchData['multi_search'] : null;
            $qb
                ->andWhere('c.id = :multi OR cc.id =:multi OR c.name01 LIKE :likemulti OR c.name02 LIKE :likemulti OR '.
                            'c.kana01 LIKE :likemulti OR c.kana02 LIKE :likemulti OR c.email LIKE :likemulti OR '.
                            'c.phone_number LIKE :likemulti OR cc.comment LIKE :likemulti')
                ->setParameter('multi', $multi)
                ->setParameter('likemulti', '%'.$searchData['multi_search'].'%');
        }

        // contact_status
        if (!empty($searchData['status']) && count($searchData['status'])) {
            $contactStatuses = [];
            foreach ($searchData['status'] as $contactStatus) {
                $contactStatuses[] = $contactStatus->getId();
            }
            $qb
                ->leftJoin('c.ContactStatus', 'cs')
                ->andWhere($qb->expr()->in('cs.id', ':contact_statuses'))
                ->setParameter('contact_statuses', $contactStatuses);
        }

        // replied
        if (isset($searchData['replied']) && !empty($searchData['replied'])) {
            switch ($searchData['replied']) {
                case [SearchContactType::REPLIED]:
                    $qb->andWhere('c.replied = true');
                    break;
                case [SearchContactType::NOT_REPLYING]:
                    $qb->andWhere('c.replied = false');
                    break;
            }
        }

        // name
        if (isset($searchData['name']) && StringUtil::isNotBlank($searchData['name'])) {
            $qb
                ->andWhere('CONCAT(c.name01, c.name02) LIKE :name')
                ->setParameter('name', '%'.$searchData['name'].'%');
        }

        // kana
        if (isset($searchData['kana']) && StringUtil::isNotBlank($searchData['kana'])) {
            $qb
                ->andWhere('CONCAT(c.kana01, c.kana02) LIKE :kana')
                ->setParameter('kana', '%'.$searchData['kana'].'%');
        }

        // email
        if (isset($searchData['email']) && StringUtil::isNotBlank($searchData['email'])) {
            $qb
                ->andWhere('c.email like :email')
                ->setParameter('email', '%'.$searchData['email'].'%');
        }

        // tel
        if (isset($searchData['phone_number']) && StringUtil::isNotBlank($searchData['phone_number'])) {
            $tel = preg_replace('/[^0-9]/ ', '', $searchData['phone_number']);
            $qb
                ->andWhere('c.phone_number LIKE :phone_number')
                ->setParameter('phone_number', '%'.$tel.'%');
        }

        // contact_id
        if (isset($searchData['contact_id']) && StringUtil::isNotBlank($searchData['contact_id'])) {
            $qb
                ->andWhere('c.id = :contact_id')
                ->setParameter('contact_id', $searchData['contact_id']);
        }

        // comment_id
        if (isset($searchData['comment_id']) && StringUtil::isNotBlank($searchData['comment_id'])) {
            $qb
                ->andWhere('cc.id = :comment_id')
                ->setParameter('comment_id', $searchData['comment_id']);
        }

        // charge_member
        if (!empty($searchData['charge_member']) && $searchData['charge_member']) {
            $qb
                ->andWhere('c.ChargeMember = :charge_member')
                ->setParameter('charge_member', $searchData['charge_member']->getId());
        }

        // contact_customer
        if (isset($searchData['customer']) && !empty($searchData['customer'])) {
            switch ($searchData['customer']) {
                case [SearchContactType::NOT_CUSTOMER]:
                    $qb->andWhere('c.Customer IS NULL');
                    break;
                case [SearchContactType::CUSTOMER]:
                    $qb->andWhere('c.Customer IS NOT NULL');
                    break;
            }
        }

        // contact_purpose
        if (!empty($searchData['contact_purpose']) && count($searchData['contact_purpose'])) {
            $contactPurposes = [];
            foreach ($searchData['contact_purpose'] as $contactPurpose) {
                $contactPurposes[] = $contactPurpose->getId();
            }
            $qb
                ->leftJoin('c.ContactPurpose', 'ccp')
                ->andWhere($qb->expr()->in('ccp.id', ':contact_purposes'))
                ->setParameter('contact_purposes', $contactPurposes);
        }

        // create_date
        if (!empty($searchData['create_date_start']) && $searchData['create_date_start']) {
            $date = $searchData['create_date_start'];
            $qb
                ->andWhere('c.create_date >= :create_date_start')
                ->setParameter('create_date_start', $date);
        }
        if (!empty($searchData['create_date_end']) && $searchData['create_date_end']) {
            $date = clone $searchData['create_date_end'];
            $date->modify('+1 days');
            $qb
                ->andWhere('c.create_date <= :create_date_end')
                ->setParameter('create_date_end', $date);
        }

        // comment_date
        if (!empty($searchData['comment_date_start']) && $searchData['comment_date_start']) {
            $date = $searchData['comment_date_start'];
            $qb
                ->andWhere('cc.update_date >= :comment_date_start')
                ->setParameter('comment_date_start', $date);
        }
        if (!empty($searchData['comment_date_end']) && $searchData['comment_date_end']) {
            $date = clone $searchData['comment_date_end'];
            $date->modify('+1 days');
            $qb
                ->andWhere('cc.update_date <= :comment_date_end')
                ->setParameter('comment_date_end', $date);
        }

        // Order By（コメント更新降順）
        $qb->select('c, MAX(cc.update_date) AS HIDDEN last_comment');
        $qb->groupBy('c.id');
        $qb->orderBy('last_comment', 'DESC');
        $qb->addorderBy('c.id', 'DESC');

        return $qb;
    }

    /**
     * ステータスごとの問い合わせ件数を取得する.
     *
     * @param integer $ContactStatusOrId
     * @return int
     * @throws NonUniqueResultException
     */
    public function countByContactStatus($ContactStatusOrId)
    {
        return (int) $this->createQueryBuilder('c')
            ->select('COALESCE(COUNT(c.id), 0)')
            ->where('c.ContactStatus = :ContactStatus')
            ->setParameter('ContactStatus', $ContactStatusOrId)
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * ユニークなUrlを返す.
     *
     * @return string
     */
    public function getUniqueUrl()
    {
        do {
            $url = StringUtil::random(32);
            $Contact = $this->findOneBy(['url' => $url]);
        } while ($Contact);

        return $url;
    }
}
